(cageExample
 (NotRoom_TCC1 0
  (NotRoom_TCC1-1 nil 3691253749 ("" (existence-tcc) nil nil) nil nil))
 (removeHumans_TCC1 0
  (removeHumans_TCC1-1 nil 3690235533 ("" (subtype-tcc) nil nil) nil
   nil))
 (removeLions_TCC1 0
  (removeLions_TCC1-1 nil 3690235533 ("" (subtype-tcc) nil nil) nil
   nil))
 (testHumans 0
  (testHumans-1 nil 3690235640
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((removeHumans const-decl "ROOM" cageExample nil)
    (addHumans const-decl "ROOM" cageExample nil)
    (setof type-eq-decl nil defined_types nil)
    (ROOM type-eq-decl nil cageExample nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (hn type-eq-decl nil cageExample nil)
    (ln type-eq-decl nil cageExample nil)
    (DOOR type-decl nil cageExample nil))
   shostak))
 (testHumans2 0
  (testHumans2-1 nil 3691424073
   ("" (grind) (("" (decompose-equality) nil nil)) nil)
   ((DOOR type-decl nil cageExample nil)
    (ln type-eq-decl nil cageExample nil)
    (hn type-eq-decl nil cageExample nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ROOM type-eq-decl nil cageExample nil)
    (setof type-eq-decl nil defined_types nil)
    (removeHumans const-decl "ROOM" cageExample nil)
    (addHumans const-decl "ROOM" cageExample nil))
   shostak))
 (testHumanMovement 0
  (testHumanMovement-2 "" 3691363257
   ("" (grind) (("" (postpone) nil nil)) nil) nil shostak)
  (testHumanMovement-1 nil 3690238385 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ID type-decl nil cageExample nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (hn type-eq-decl nil cageExample nil)
    (ln type-eq-decl nil cageExample nil)
    (DOOR type-decl nil cageExample nil)
    (setof type-eq-decl nil defined_types nil)
    (ROOM type-eq-decl nil cageExample nil)
    (ROOMS type-eq-decl nil cageExample nil)
    (completeValid const-decl "bool" cageExample nil)
    (GOODROOMS type-eq-decl nil cageExample nil)
    (validRoomList2 const-decl "bool" cageExample nil)
    (validRoomList const-decl "bool" cageExample nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (lionAtDoor const-decl "bool" cageExample nil)
    (humanAtDoor const-decl "bool" cageExample nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (safeDoor const-decl "bool" cageExample nil)
    (sharesDoor2 const-decl "bool" cageExample nil)
    (addHumans const-decl "ROOM" cageExample nil)
    (removeHumans const-decl "ROOM" cageExample nil)
    (moveHuman const-decl "ROOMS" cageExample nil)
    (safeSystem const-decl "bool" cageExample nil))
   shostak))
 (testLionMovement 0
  (testLionMovement-1 nil 3691378757 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ID type-decl nil cageExample nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (hn type-eq-decl nil cageExample nil)
    (ln type-eq-decl nil cageExample nil)
    (DOOR type-decl nil cageExample nil)
    (setof type-eq-decl nil defined_types nil)
    (ROOM type-eq-decl nil cageExample nil)
    (ROOMS type-eq-decl nil cageExample nil)
    (completeValid const-decl "bool" cageExample nil)
    (GOODROOMS type-eq-decl nil cageExample nil)
    (validRoomList2 const-decl "bool" cageExample nil)
    (validRoomList const-decl "bool" cageExample nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (lionAtDoor const-decl "bool" cageExample nil)
    (humanAtDoor const-decl "bool" cageExample nil)
    (/= const-decl "boolean" notequal nil)
    (XOR const-decl "bool" xor_def nil)
    (safeDoor const-decl "bool" cageExample nil)
    (sharesDoor2 const-decl "bool" cageExample nil)
    (addLions const-decl "ROOM" cageExample nil)
    (removeLions const-decl "ROOM" cageExample nil)
    (moveLion const-decl "ROOMS" cageExample nil)
    (safeSystem const-decl "bool" cageExample nil))
   shostak)))

