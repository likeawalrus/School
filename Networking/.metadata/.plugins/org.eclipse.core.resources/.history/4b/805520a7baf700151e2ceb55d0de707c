package main;

import java.util.Vector;


public class actualThread {

	static int L, M, N, threadCount;
	private Thread myThread;
	/**
	 * @param args
	 */
	actualThread(long rank) 
	{

		  int my_rank = (int)rank; //rank is void* type, so can cast to (long) type only; 
		  int Q = L/threading.thread_count;
		  int R = L%threading.thread_count;
		  int my_first_row;
		  int my_last_row;
		  Double temp = 0.0;
		  if(my_rank<R){
		    my_first_row = my_rank*(Q+1);
		    my_last_row = my_first_row+Q;
		  }
		  else{
		    my_first_row = my_rank * Q+R;
		    my_last_row = my_first_row+(Q-1);
		  }
		  //This is where the math will happen
		  for(int i = my_first_row; i<=my_last_row;i++){
		    for(int j = 0; j<N; j++){
		      for(int k = 0; k < M; k++){
		        temp += threading.matrixA.elementAt(i).elementAt(k) * threading.matrixB.elementAt(k).elementAt(j);
		      }
		      threading.matrixC.elementAt(i).set(j, temp);
		      temp = 0.0;
		    }
		  }
		}

}
